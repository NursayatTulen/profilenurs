const express = require("express");
const multer = require("multer");
const cors = require("cors");
const path = require("path");
const fs = require("fs");

const app = express();
const PORT = 3000;

app.use(cors());
app.use(express.json()); // JSON —Å“±—Ä–∞–Ω—ã—Å—Ç–∞—Ä—ã–Ω –æ“õ—É
app.use(express.urlencoded({ extended: true })); // –§–æ—Ä–º–∞ –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ–Ω –æ“õ—É

const UPLOADS_DIR = path.join(__dirname, "uploads");

// üìå –ï–≥–µ—Ä "uploads" –±—É–º–∞—Å—ã –∂–æ“õ –±–æ–ª—Å–∞, –æ–Ω—ã –∂–∞—Å–∞–π–º—ã–∑
if (!fs.existsSync(UPLOADS_DIR)) {
    fs.mkdirSync(UPLOADS_DIR);
    console.log("üìÇ 'uploads' –±—É–º–∞—Å—ã –∂–∞—Å–∞–ª–¥—ã.");
}

// üìå –§–∞–π–ª–¥–∞—Ä–¥—ã —Å–∞“õ—Ç–∞—É –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä—ñ
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        console.log(`üìÇ –§–∞–π–ª —Å–∞“õ—Ç–∞–ª–∞—Ç—ã–Ω –æ—Ä—ã–Ω: ${UPLOADS_DIR}`);
        cb(null, UPLOADS_DIR);
    },
    filename: (req, file, cb) => {
        console.log(`üìÅ –§–∞–π–ª –∞—Ç—ã: ${file.originalname}`);
        cb(null, file.originalname);
    },
});

const upload = multer({ storage });

// üìå –ñ“Ø–∫—Ç–µ–ª–≥–µ–Ω —Ñ–∞–π–ª–¥–∞—Ä–¥—ã –∞—à—ã“õ —Ç“Ø—Ä–¥–µ –∫”©—Ä—Å–µ—Ç—É
app.use("/uploads", express.static(UPLOADS_DIR));

// üìå **–§–∞–π–ª –∂“Ø–∫—Ç–µ—É API**
app.post("/upload", upload.single("file"), (req, res) => {
    try {
        if (!req.file) {
            console.error("‚ùå –§–∞–π–ª –∂“Ø–∫—Ç–µ–ª–º–µ–¥—ñ!");
            return res.status(400).json({ error: "–§–∞–π–ª –∂“Ø–∫—Ç–µ–ª–º–µ–¥—ñ" });
        }

        console.log(`‚úÖ –§–∞–π–ª —Å”ô—Ç—Ç—ñ –∂“Ø–∫—Ç–µ–ª–¥—ñ: ${req.file.originalname}`);
        res.json({ fileName: req.file.originalname, filePath: `/uploads/${req.file.originalname}` });
    } catch (err) {
        console.error("üö® –§–∞–π–ª –∂“Ø–∫—Ç–µ—É “õ–∞—Ç–µ—Å—ñ:", err);
        res.status(500).json({ error: "–§–∞–π–ª –∂“Ø–∫—Ç–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã" });
    }
});

// üìå **–§–∞–π–ª–¥–∞—Ä —Ç—ñ–∑—ñ–º—ñ–Ω –∞–ª—É API**
app.get("/files", (req, res) => {
    try {
        const files = fs.readdirSync(UPLOADS_DIR);
        console.log(`üìÇ “ö–æ–ª–∂–µ—Ç—ñ–º–¥—ñ —Ñ–∞–π–ª–¥–∞—Ä:`, files);
        res.json(files.map(file => ({ name: file, url: `/uploads/${file}` })));
    } catch (err) {
        console.error("üö® –§–∞–π–ª —Ç—ñ–∑—ñ–º—ñ–Ω –æ“õ—É “õ–∞—Ç–µ—Å—ñ:", err);
        res.status(500).json({ error: "–§–∞–π–ª —Ç—ñ–∑—ñ–º—ñ–Ω –∞–ª—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã" });
    }
});

// üìå **–§–∞–π–ª–¥—ã –∂–æ—é API (–∫–æ–¥ –∞—Ä“õ—ã–ª—ã —Ç–µ–∫—Å–µ—Ä—É)**
app.delete("/delete/:fileName", express.json(), (req, res) => {
    try {
        const { fileName } = req.params;
        const { code } = req.body; // –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã –µ–Ω–≥—ñ–∑–≥–µ–Ω –∫–æ–¥

        if (code !== "nurs") {
            console.warn(`‚ùå “ö–∞—Ç–µ –∫–æ–¥! –§–∞–π–ª "${fileName}" ”©—à—ñ—Ä—ñ–ª–º–µ–¥—ñ.`);
            return res.status(403).json({ error: "“ö–∞—Ç–µ –∫–æ–¥! –§–∞–π–ª ”©—à—ñ—Ä—ñ–ª–º–µ–¥—ñ." });
        }

        const filePath = path.join(UPLOADS_DIR, fileName);
        if (!fs.existsSync(filePath)) {
            console.warn(`‚ö†Ô∏è –§–∞–π–ª —Ç–∞–±—ã–ª–º–∞–¥—ã: ${fileName}`);
            return res.status(404).json({ error: "–§–∞–π–ª —Ç–∞–±—ã–ª–º–∞–¥—ã" });
        }

        fs.unlinkSync(filePath);
        console.log(`‚ùå –§–∞–π–ª ”©—à—ñ—Ä—ñ–ª–¥—ñ: ${fileName}`);
        res.json({ message: "–§–∞–π–ª —Å”ô—Ç—Ç—ñ ”©—à—ñ—Ä—ñ–ª–¥—ñ" });
    } catch (err) {
        console.error("üö® –§–∞–π–ª ”©—à—ñ—Ä—É “õ–∞—Ç–µ—Å—ñ:", err);
        res.status(500).json({ error: "–§–∞–π–ª ”©—à—ñ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã" });
    }
});

// üìå **–°–µ—Ä–≤–µ—Ä–¥—ñ —ñ—Å–∫–µ “õ–æ—Å—É**
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã: http://localhost:${PORT}`);
});
// üìå –ë–∞—Å—Ç—ã –±–µ—Ç —Ä–µ—Ç—ñ–Ω–¥–µ nurs.html –∫”©—Ä—Å–µ—Ç—É
app.get("/", (req, res) => {
    res.sendFile(path.join(__dirname, "public", "index.html"));
});

// üìå 'public' –±—É–º–∞—Å—ã–Ω–¥–∞“ì—ã –±–∞—Ä–ª—ã“õ —Ñ–∞–π–ª–¥–∞—Ä–¥—ã —Å—Ç–∞—Ç–∏–∫–∞–ª—ã“õ —Ä–µ—Ç—ñ–Ω–¥–µ –∫”©—Ä—Å–µ—Ç—É
app.use(express.static(path.join(__dirname, "public")));

